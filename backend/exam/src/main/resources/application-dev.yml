spring:
  application:
    name: service-exam
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root123456
    url: jdbc:mysql://www.csystd.cn:3306/exam?characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
    hikari:
      minimum-idle: 5
      idle-timeout: 60000
      maximum-pool-size: 10
      max-lifetime: 180000

  redis:
    port: 6379
    jedis:
      pool:
        max-active: 8
        max-idle: 8
    timeout: 5000
    host: 81.68.91.157
    password: AuditRedis


  jpa:
    # 调试的时候用，打印SQL语句
    show-sql: false
    hibernate:
      ddl-auto: update
  servlet:
    multipart:
      max-file-size: 100MB # 最大支持文件大小
      max-request-size: 100MB # 最大支持请求大小
  kafka:
    bootstrap-servers: 81.68.91.157:9092
    #生产者的配置，大部分我们可以使用默认的，这里列出几个比较重要的属性
    producer:
      #每批次发送消息的数量
      batch-size: 16
      #设置大于0的值将使客户端重新发送任何数据，一旦这些数据发送失败。注意，这些重试与客户端接收到发送错误时的重试没有什么不同。允许重试将潜在的改变数据的顺序，如果这两个消息记录都是发送到同一个partition，则第一个消息失败第二个发送成功，则第二条消息会比第一条消息出现要早。
      retries: 0
      #producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。
      buffer-memory: 10485760
      #key序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        max.request.size: 10485760



user:
  default:
    # 用户名默认前缀
    username: user
    # 用户默认头像
    avatar: http://d.lanrentuku.com/down/png/1904/business_avatar/8_avatar_2754583.png

server:
  port: 9527
  servlet:
    context-path: /api

# 拦截器相关的配置
interceptors:
  # 不需要进行拦截的接口地址，用逗号隔开
  auth-ignore-uris: ${server.servlet.context-path}/user/register,${server.servlet.context-path}/user/login
